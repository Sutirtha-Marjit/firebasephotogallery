import { Component, OnInit } from '@angular/core';
import { DesignItem , ValidMappedDesignInage} from '../../shared/Datatypes';
import { Location } from '@angular/common';
import {FormControl} from '@angular/forms'
import { Router  } from '@angular/router';
import { HttpClientModule, HttpClient } from '@angular/common/http';
import {FireBasePropertiesService} from '../../services/fire-base-properties.service';

@Component({
  selector: 'app-garbage-clean-up',
  templateUrl: './garbage-clean-up.component.html',
  styleUrls: ['./garbage-clean-up.component.css']
})
export class GarbageCleanUpComponent implements OnInit {
  public firebase:FireBase;
  private ListOfDesignImages:Array<string>=[];
  private ListOfDesign:Array<any>=[];
  private FireBaseDataREF:any = [];

  public resultList:Array<ValidMappedDesignInage>=[];
  

  constructor(private fbps:FireBasePropertiesService,private http:HttpClient) { 
    console.clear();
    var base = this;    
    base.firebase = fbps.getInstanceOfFireBase();
    base.FireBaseDataREF = this.firebase.database().ref(this.fbps.getRefString(1)+'/data');
    base.FireBaseDataREF.once('value').then(function(snapShot){
      base.ListOfDesign = snapShot.val();
      console.log(base.ListOfDesign);
      base.prepareList();
    });
  }

  getNormalArrayOfListOfDesign(){
    var arr=[];
    for(var el in this.ListOfDesign){
      this.ListOfDesign[el].id=el;
      arr.push(this.ListOfDesign[el]);
    }

    return arr;
  }

  prepareList(){
    
    var localList = [];
    if(this.ListOfDesign!==null){
      
      localList = this.getNormalArrayOfListOfDesign();
      console.log('localList prepared');
      console.dir(localList);
      this.ListOfDesignImages.forEach((imgPath)=>{

        if(imgPath!=='.' && imgPath!=='..'){
          //console.log('find operation for imgPath:'+imgPath);
          var r = localList.find(function(el){
             var fnameArr = el.file.split('/');
             var fname =  fnameArr[fnameArr.length-1];
             //console.log('examining :'+fname);
             //console.log('returning '+(fname === imgPath));           
             return (fname === imgPath);
          });
          //console.log('find result');
          //console.log(r);
          if(r){
            console.log(imgPath+' is found for :'+r.id);
            this.resultList.push(
              {
                mapped:true,
                mappedWith:r.id,
                main:this.fbps.getDesignRootFolder()+'/designs/main/'+imgPath,
                thumbnail:this.fbps.getDesignRootFolder()+'/designs/small/'+imgPath,
                onlyImagePath:imgPath
              }
            );
          }else{
            console.log(imgPath+' is not found');
            this.resultList.push(
              {
                mapped:false,
                mappedWith:'no data availabale',
                main:this.fbps.getDesignRootFolder()+'/designs/main/'+imgPath,
                thumbnail:this.fbps.getDesignRootFolder()+'/designs/small/'+imgPath,
                onlyImagePath:imgPath
              }
            );
          }

        }  


      });


    }else{

      this.ListOfDesignImages.forEach((imgPath)=>{
          if(imgPath!=='.' && imgPath!=='..'){
              this.resultList.push({
              mapped:false,
              mappedWith:'',
              main:this.fbps.getDesignRootFolder()+'/designs/main/'+imgPath,
              thumbnail:this.fbps.getDesignRootFolder()+'/designs/small/'+imgPath,
              onlyImagePath:imgPath
            })
          }
      });

    }

  this.sortByCategory();
   // console.log(this.resultList);

  }

  sortByCategory(){
    this.resultList.sort((designEL)=>{
      var t = designEL.mapped ? 1 : 0;
      return t;
    })
  }

  simpleDelete(path:string,action:string){
      var formdata = new FormData();
      
      formdata.append('auth-token',this.fbps.getPHPAuthToken());
      formdata.append('action',action);
      formdata.append('filename',path);

      this.http.post(this.fbps.getDesignRootFolder()+'feed.php',formdata).subscribe((statusDataFirst)=>{
               console.log(statusDataFirst);
               
      });

  }

  getList(){
    this.resultList = [];
    this.ListOfDesignImages = [];
    var formdata = new FormData();
    formdata.append('auth-token',this.fbps.getPHPAuthToken());
    formdata.append('action','list');
    this.http.post(this.fbps.getDesignRootFolder()+'feed.php',formdata).subscribe((statusObject:any)=>{
      this.ListOfDesignImages = statusObject.data;
      this.prepareList();
    });
  }

  ngOnInit() {
     this.getList();


  }

}
